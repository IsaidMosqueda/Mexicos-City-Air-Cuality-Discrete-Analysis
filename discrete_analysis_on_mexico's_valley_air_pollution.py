# -*- coding: utf-8 -*-
"""Discrete Analysis on Mexico's Valley air pollution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GW-Au6SROkpA7wMoDKzxAyrDjfe1lQ4_

<font color="Teal" face="Comic Sans MS,arial">
  <h1 align="center"><i> Discrete Analysis on Mexico's Valley air pollution</i></h1>
  </font>
  <h3 align="center"><i>  </i></h3>
  </font>
  <font color="Black" face="Comic Sans MS,arial">
  <h4 align="center"><i> Discrete Maths</i></h5>
  <h5 align="center"><i>Mosqueda García Raul Isaid 315096574</i></h5>
 </font>

---

Import required libraries
"""

import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""##Transform and Load of the data"""

#Load data
data_2000 = pd.read_csv('https://raw.githubusercontent.com/IsaidMosqueda/Mexicos-City-Air-Cuality-Discrete-Analysis/main/Data/indice_2000.CSV',encoding= 'latin',sep= ',')
data_2001 = pd.read_csv('https://raw.githubusercontent.com/IsaidMosqueda/Mexicos-City-Air-Cuality-Discrete-Analysis/main/Data/indice_2001.CSV',encoding= 'latin',sep= ',')
data_2002 = pd.read_csv('https://raw.githubusercontent.com/IsaidMosqueda/Mexicos-City-Air-Cuality-Discrete-Analysis/main/Data/indice_2002.CSV',encoding= 'latin',sep= ',')
data_2003 = pd.read_csv('https://raw.githubusercontent.com/IsaidMosqueda/Mexicos-City-Air-Cuality-Discrete-Analysis/main/Data/indice_2003.CSV',encoding= 'latin',sep= ',')
data_2004 = pd.read_csv('https://raw.githubusercontent.com/IsaidMosqueda/Mexicos-City-Air-Cuality-Discrete-Analysis/main/Data/indice_2004.CSV',encoding= 'latin',sep= ',')
data_2005 = pd.read_csv('https://raw.githubusercontent.com/IsaidMosqueda/Mexicos-City-Air-Cuality-Discrete-Analysis/main/Data/indice_2005.CSV',encoding= 'latin',sep= ',')
data_2006 = pd.read_csv('https://raw.githubusercontent.com/IsaidMosqueda/Mexicos-City-Air-Cuality-Discrete-Analysis/main/Data/indice_2006.CSV',encoding= 'latin',sep= ',')
data_2007 = pd.read_csv('https://raw.githubusercontent.com/IsaidMosqueda/Mexicos-City-Air-Cuality-Discrete-Analysis/main/Data/indice_2007.CSV',encoding= 'latin',sep= ',')
data_2008 = pd.read_csv('https://raw.githubusercontent.com/IsaidMosqueda/Mexicos-City-Air-Cuality-Discrete-Analysis/main/Data/indice_2008.CSV',encoding= 'latin',sep= ',')
data_2009 = pd.read_csv('https://raw.githubusercontent.com/IsaidMosqueda/Mexicos-City-Air-Cuality-Discrete-Analysis/main/Data/indice_2009.CSV',encoding= 'latin',sep= ',')
data_2010 = pd.read_csv('https://raw.githubusercontent.com/IsaidMosqueda/Mexicos-City-Air-Cuality-Discrete-Analysis/main/Data/indice_2010.CSV',encoding= 'latin',sep= ',')
data_2011 = pd.read_csv('https://raw.githubusercontent.com/IsaidMosqueda/Mexicos-City-Air-Cuality-Discrete-Analysis/main/Data/indice_2011.CSV',encoding= 'latin',sep= ',')
data_2012 = pd.read_csv('https://raw.githubusercontent.com/IsaidMosqueda/Mexicos-City-Air-Cuality-Discrete-Analysis/main/Data/indice_2012.CSV',encoding= 'latin',sep= ',')
data_2013 = pd.read_csv('https://raw.githubusercontent.com/IsaidMosqueda/Mexicos-City-Air-Cuality-Discrete-Analysis/main/Data/indice_2013.CSV',encoding= 'latin',sep= ',')
data_2014 = pd.read_csv('https://raw.githubusercontent.com/IsaidMosqueda/Mexicos-City-Air-Cuality-Discrete-Analysis/main/Data/indice_2014.CSV',encoding= 'latin',sep= ',')
data_2015 = pd.read_csv('https://raw.githubusercontent.com/IsaidMosqueda/Mexicos-City-Air-Cuality-Discrete-Analysis/main/Data/indice_2015.CSV',encoding= 'latin',sep= ',')
data_2016 = pd.read_csv('https://raw.githubusercontent.com/IsaidMosqueda/Mexicos-City-Air-Cuality-Discrete-Analysis/main/Data/indice_2016.CSV',encoding= 'latin',sep= ',')
data_2017 = pd.read_csv('https://raw.githubusercontent.com/IsaidMosqueda/Mexicos-City-Air-Cuality-Discrete-Analysis/main/Data/indice_2017.CSV',encoding= 'latin',sep= ',')
data_2018 = pd.read_csv('https://raw.githubusercontent.com/IsaidMosqueda/Mexicos-City-Air-Cuality-Discrete-Analysis/main/Data/indice_2018.csv',encoding= 'latin',sep= ',')

data_2000 = data_2000.rename(columns={'FECHA':'Fecha'}) #Fix column name miss match

data = data_2000.append(data_2001).append(data_2001).append(data_2002).append(data_2003).append(data_2004).append(data_2005).append(data_2006).append(data_2007).append(data_2008).append(data_2009).append(data_2010.iloc[:,0:27]).append(data_2011.iloc[:,0:27]).append(data_2012.iloc[:,0:27]).append(data_2013.iloc[:,0:27]).append(data_2014.iloc[:,0:27]).append(data_2015.iloc[:,0:27]).append(data_2016.iloc[:,0:27]).append(data_2017.iloc[:,0:27]).append(data_2018.iloc[:,0:27])
data #Merge al dataframes into one

"""##Reduce time demntion
Having gotten all the data in a single data frame we proceed by reducing it to just one vector for each pollutant.
"""

#Get the mean data for each pollutant
Ozono = (np.array(data['Noroeste Ozono'])+np.array(data['Noreste Ozono'])+np.array(data['Suroeste Ozono'])+np.array(data['Sureste Ozono'])+np.array(data['Centro Ozono']))/5
Dioxido_Azufre = (np.array(data['Noroeste diÃ³xido de azufre'])+np.array(data['Noreste diÃ³xido de azufre'])+np.array(data['Suroeste diÃ³xido de azufre'])+np.array(data['Sureste diÃ³xido de azufre'])+np.array(data['Centro diÃ³xido de azufre']))/5
Dioxido_Nitrogeno = (np.array(data['Noroeste diÃ³xido de nitrÃ³geno'])+np.array(data['Noreste diÃ³xido de nitrÃ³geno'])+np.array(data['Suroeste diÃ³xido de nitrÃ³geno'])+np.array(data['Sureste diÃ³xido de nitrÃ³geno'])+np.array(data['Centro diÃ³xido de nitrÃ³geno']))/5
Monoxido_Carbono = (np.array(data['Noroeste monÃ³xido de carbono'])+np.array(data['Noreste monÃ³xido de carbono'])+np.array(data['Suroeste monÃ³xido de carbono'])+np.array(data['Sureste monÃ³xido de carbono'])+np.array(data['Centro monÃ³xido de carbono']))/5
PM10 = (np.array(data['Noroeste PM10'])+np.array(data['Noreste PM10'])+np.array(data['Suroeste PM10'])+np.array(data['Sureste PM10'])+np.array(data['Centro PM10']))/5
Fecha = list(data['Fecha'])

#Remove NaNs
Ozono_nans = np.argwhere(np.isnan(Ozono))
Azufre_nans = np.argwhere(np.isnan(Dioxido_Azufre))
Nitrogeno_nans = np.argwhere(np.isnan(Dioxido_Nitrogeno))
Carbono_nans = np.argwhere(np.isnan(Monoxido_Carbono))
PM10_nans = np.argwhere(np.isnan(PM10))

for idx in Ozono_nans:
  Ozono[idx] = (Ozono[idx-1]+Ozono[idx-2])/2

for idx in Azufre_nans:
  Dioxido_Azufre[idx] = (Dioxido_Azufre[idx-1]+Dioxido_Azufre[idx-2])/2

for idx in Nitrogeno_nans:
  Dioxido_Nitrogeno[idx] = (Dioxido_Nitrogeno[idx-1]+Dioxido_Nitrogeno[idx-2])/2

for idx in Carbono_nans:
  Monoxido_Carbono[idx] = (Monoxido_Carbono[idx-1]+Monoxido_Carbono[idx-2])/2

for idx in PM10_nans:
  PM10[idx] = (PM10[idx-1]+PM10[idx-2])/2

#First 10 avereage for each pollutant
print(Ozono[:10])
print(Dioxido_Azufre[:10])
print(Dioxido_Nitrogeno[:10])
print(Monoxido_Carbono[:10])
print(PM10[:10])

MX_valley_avg = pd.DataFrame(list(zip(Fecha,Ozono,Dioxido_Azufre,Dioxido_Nitrogeno,Monoxido_Carbono,PM10)), columns =['Fecha','Ozono','Dioxido_Azufre','Dioxido_Nitrogeno','Monoxido_Carbono','PM10']) 
MX_valley_avg

"""Once all the data is given by each pollutant we reduce it to daily and monthly displays."""

#Get list of dates and remove nans
dates = []
for date in list(data['Fecha']):
  if date not in dates:
    dates.append(date)
dates_= pd.to_datetime(dates, format='%d/%m/%Y')
nans_idx = np.argwhere(np.isnan(dates_)).flatten()
for idx_ in nans_idx:
  dates[idx_] = dates[idx_-1]

#Get the mean of each pollutant for each date
Ozono_rfc=[]
Dioxido_Azufre_rfc=[]
Dioxido_Nitrogeno_rfc=[]
Monoxido_Carbono_rfc=[]
PM10_refc=[]
for date in dates:
  temp_ = MX_valley_avg[MX_valley_avg['Fecha']==date]

  Ozono_rfc.append(np.average(temp_['Ozono']))
  Dioxido_Azufre_rfc.append(np.average(temp_['Dioxido_Azufre']))
  Dioxido_Nitrogeno_rfc.append(np.average(temp_['Dioxido_Nitrogeno']))
  Monoxido_Carbono_rfc.append(np.average(temp_['Monoxido_Carbono']))
  PM10_refc.append(np.average(temp_['PM10']))

#Nicely put together in a dataframe
MX_valley_rfc = pd.DataFrame(list(zip(dates,Ozono_rfc,Dioxido_Azufre_rfc,Dioxido_Nitrogeno_rfc,Monoxido_Carbono_rfc,PM10_refc)), columns =['Fecha','Ozono','Dioxido_Azufre','Dioxido_Nitrogeno','Monoxido_Carbono','PM10'])
MX_valley_rfc['Fecha'] = pd.to_datetime(MX_valley_rfc['Fecha'], format='%d/%m/%Y')
MX_valley_rfc.to_csv(r'/content/Data/MX_valley_rfc.csv')
MX_valley_rfc

#Plot daily data
plt.plot(MX_valley_rfc['Fecha'],MX_valley_rfc['Ozono'],color='lightblue')
sns.set_style("darkgrid", {"axes.facecolor": ".9"})
plt.xlabel('Tiempo')
plt.ylabel('Concentracion Ozono O3(ppb)')
plt.title('Ozono')
plt.show()

plt.plot(MX_valley_rfc['Fecha'],MX_valley_rfc['Dioxido_Azufre'],color='gold')
sns.set_style("darkgrid", {"axes.facecolor": ".9"})
plt.xlabel('Tiempo')
plt.ylabel('Concentracion Dioxido_Azufre SO2 (ppb)')
plt.title('Dioxido de Azufre')
plt.show()

plt.plot(MX_valley_rfc['Fecha'],MX_valley_rfc['Dioxido_Nitrogeno'],color='ivory')
sns.set_style("darkgrid", {"axes.facecolor": ".9"})
plt.xlabel('Tiempo')
plt.ylabel('Concentracion Dioxido_Nitrogeno NO2 (ppb)')
plt.title('Dioxido de Nitrogeno')
plt.show()

plt.plot(MX_valley_rfc['Fecha'],MX_valley_rfc['Monoxido_Carbono'],color='grey')
sns.set_style("darkgrid", {"axes.facecolor": ".9"})
axes = plt.gca()
x_vals = np.array(axes.get_xlim())
y_vals = 11.0 + 0 * x_vals
line = plt.plot(x_vals, y_vals, '-',color='red')
plt.xlabel('Tiempo')
plt.ylabel('Concentracion Monoxido_Carbono CO(ppm)')
plt.title('Monoxido de Carbono')
plt.legend(loc='upper right', handles= line,labels=['Riesgoso para la salud'])
plt.show()

plt.plot(MX_valley_rfc['Fecha'],MX_valley_rfc['PM10'],color='silver')
sns.set_style("darkgrid", {"axes.facecolor": ".9"})
axes = plt.gca()
x_vals = np.array(axes.get_xlim())
y_vals = 75.0 + 0 * x_vals
line = plt.plot(x_vals, y_vals, '-',color='red')
plt.xlabel('Tiempo')
plt.ylabel('Concentracion PM10 (µg/m³)')
plt.title('PM10')
plt.legend(loc='upper left', handles= line,labels=['Riesgoso para la salud'])
plt.show()

"""#Discrete Analysis
For the analysis, we would like to find the longest increasing sequence for each of these pollutants, as well with special distinction to the cases where the levels of the pollutant exceeds the health treathing line.

After that, it might be usefull to known what the 3 best/worst months (1/4 of a year) have been, and try to further research what could have cause these behaviours in the past.

##Increasing longest sequence
In order to find the longest increasing sequence the naive aproeach wold be to do value by value comparasions, but this would take $n^2$ comparations in the worst case. In order to improve this, we will develop a function that will take $O(nlogn)$ time complexity.
"""

def increasing_longest_subsequence(A):
  subsequences=[[999999999999]]
  last_vals=[999999999]
  for i in range(len(A)):

    if A[i] < min(last_vals):   #Case 1
      subsequences = [[A[i]]]
      last_vals = [A[i]]

    elif A[i] > max(last_vals): #Case 2
      longest_sub = max(subsequences,key=len).copy()
      longest_sub.append(A[i])
      subsequences.append(longest_sub)
      last_vals.append(A[i])
    
    else: #Case 3
      longest_subs_idx = np.argwhere(np.array(last_vals) <= A[i]) #Get indexes of lists that will apend new val
      candidates = [subsequences[idx_[0]] for idx_ in longest_subs_idx]
      j = subsequences.index(max(candidates,key=len))

      new_sub = subsequences[j].copy()
      new_sub.append(A[i]) #Add new value to avialable subsequence       
        
      to_pop = [] #Get indexes of lists with same length as the new improved list
      for k in range(len(subsequences)):
        if len(subsequences[k]) == len(new_sub):
          to_pop.append(k)

      for idx_ in to_pop: #Get all subsucession to remove
        subsequences.pop(idx_)
        last_vals.pop(idx_)

        subsequences.append(new_sub) #Copy new list into the subsequences list 
        last_vals.append(A[i])

  return max(subsequences,key=len)

"""Having defined this funcion, we look for the longest increasing secuences in each pollutant."""

Ozono_lis = increasing_longest_subsequence(MX_valley_rfc['Ozono'])
Azufre_lis = increasing_longest_subsequence(MX_valley_rfc['Dioxido_Azufre'])
Nitrogeno_lis = increasing_longest_subsequence(MX_valley_rfc['Dioxido_Nitrogeno'])
Carbono_lis = increasing_longest_subsequence(MX_valley_rfc['Monoxido_Carbono'])
PM10_lis = increasing_longest_subsequence(MX_valley_rfc['PM10'])

print(Ozono_lis)
print(Azufre_lis)
print(Nitrogeno_lis)
print(Carbono_lis)
print(PM10_lis)

"""Once we have found the longest increasing sequences on the daily data, the next step is to zoom out an find these longest increasing sequences on the monthly data as well as trying to find what could be the best sequences of monts where this polutants have stayed on the lowest.

##Refactoring to monthly data
"""

#Get each month adn year for the given dates
MX_valley_rfc['mes'] = pd.DatetimeIndex(MX_valley_rfc['Fecha']).month
MX_valley_rfc['anno'] = pd.DatetimeIndex(MX_valley_rfc['Fecha']).year
years = list(set(MX_valley_rfc['anno']))
years.sort()
months = list(set(MX_valley_rfc['mes']))

#get monthly data based on the mean of each pollutant by each month of each year
monthly_ozono = []
monthly_azufre = []
monthly_nitrogeno = []
monthly_carbono = []
monthly_PM10 = []

for year in years:
  temp_ = MX_valley_rfc[MX_valley_rfc['anno']==year]
  for month in months:
    monthly_ozono.append(np.mean(temp_[temp_['mes']==month]['Ozono']))
    monthly_azufre.append(np.mean(temp_[temp_['mes']==month]['Dioxido_Azufre']))
    monthly_nitrogeno.append(np.mean(temp_[temp_['mes']==month]['Dioxido_Nitrogeno']))
    monthly_carbono.append(np.mean(temp_[temp_['mes']==month]['Monoxido_Carbono']))
    monthly_PM10.append(np.mean(temp_[temp_['mes']==month]['PM10']))

#Remove nans
nans_idx = np.where(np.isnan(np.array(monthly_ozono)))
for idx in nans_idx:
  j= idx[0]
  monthly_ozono[j] = (monthly_ozono[j-1]+monthly_ozono[j+1])/2
  monthly_azufre[j] = (monthly_azufre[j-1]+monthly_azufre[j+1])/2
  monthly_nitrogeno[j] = (monthly_nitrogeno[j-1]+monthly_nitrogeno[j+1])/2
  monthly_carbono[j] = (monthly_carbono[j-1]+monthly_carbono[j+1])/2
  monthly_PM10[j] = (monthly_PM10[j-1]+monthly_PM10[j+1])/2

years_=[]
for year in years:
  years_.append([year]*12)
years_ = np.array(years_).flatten()

months_= months * 19

#Nicely put together in a dataframe
MX_valley_mo = pd.DataFrame(list(zip(years_,months_,monthly_ozono,monthly_azufre,monthly_nitrogeno,monthly_carbono,monthly_PM10)), columns =['Anno','Mes','Ozono','Dioxido_Azufre','Dioxido_Nitrogeno','Monoxido_Carbono','PM10'])
MX_valley_mo.to_csv(r'/content/Data/MX_valley_mo.csv')
MX_valley_mo

#Plot the monthly data
plt.plot(MX_valley_mo['Ozono'],color='lightblue')
sns.set_style("darkgrid", {"axes.facecolor": ".9"})
plt.xlabel('Tiempo')
plt.ylabel('Concentracion Ozono O3(ppb)')
plt.title('Ozono')
plt.show()

plt.plot(MX_valley_mo['Dioxido_Azufre'],color='gold')
sns.set_style("darkgrid", {"axes.facecolor": ".9"})
plt.xlabel('Tiempo')
plt.ylabel('Concentracion Dioxido_Azufre SO2 (ppb)')
plt.title('Dioxido de Azufre')
plt.show()

plt.plot(MX_valley_mo['Dioxido_Nitrogeno'],color='ivory')
sns.set_style("darkgrid", {"axes.facecolor": ".9"})
plt.xlabel('Tiempo')
plt.ylabel('Concentracion Dioxido_Nitrogeno NO2 (ppb)')
plt.title('Dioxido de Nitrogeno')
plt.show()

plt.plot(MX_valley_mo['Monoxido_Carbono'],color='grey')
sns.set_style("darkgrid", {"axes.facecolor": ".9"})
axes = plt.gca()
x_vals = np.array(axes.get_xlim())
y_vals = 11.0 + 0 * x_vals
line = plt.plot(x_vals, y_vals, '-',color='red')
plt.xlabel('Tiempo')
plt.ylabel('Concentracion Monoxido_Carbono CO(ppm)')
plt.title('Monoxido de Carbono')
plt.legend(loc='upper right', handles= line,labels=['Riesgoso para la salud'])
plt.show()

plt.plot(MX_valley_mo['PM10'],color='silver')
sns.set_style("darkgrid", {"axes.facecolor": ".9"})
axes = plt.gca()
x_vals = np.array(axes.get_xlim())
y_vals = 75.0 + 0 * x_vals
line = plt.plot(x_vals, y_vals, '-',color='red')
plt.xlabel('Tiempo')
plt.ylabel('Concentracion PM10 (µg/m³)')
plt.title('PM10')
plt.legend(loc='upper left', handles= line,labels=['Riesgoso para la salud'])
plt.show()

"""Finally, once we have gotten the data scaled to monthly data, we may find the Longest increasing sequence using the function defined above, as well as finding what we will later define as the best 3 months. """

Ozono_lis_mo = increasing_longest_subsequence(MX_valley_mo['Ozono'])
Azufre_lis_mo = increasing_longest_subsequence(MX_valley_mo['Dioxido_Azufre'])
Nitrogeno_lis_mo = increasing_longest_subsequence(MX_valley_mo['Dioxido_Nitrogeno'])
Carbono_lis_mo = increasing_longest_subsequence(MX_valley_mo['Monoxido_Carbono'])
PM10_lis_mo = increasing_longest_subsequence(MX_valley_mo['PM10'])

print(Ozono_lis_mo,len(Ozono_lis_mo))
print(Azufre_lis_mo,len(Azufre_lis_mo))
print(Nitrogeno_lis_mo,len(Nitrogeno_lis_mo))
print(Carbono_lis_mo,len(Carbono_lis_mo))
print(PM10_lis_mo,len(PM10_lis_mo))

plt.plot(Carbono_lis_mo)
plt.title('Secuencia creciente mas larga CO2')
plt.ylabel('Concentracion Monoxido_Carbono CO2(ppm)')
plt.show()

plt.plot(PM10_lis_mo)
plt.title('Secuencia creciente mas larga PM10')
plt.ylabel('Concentracion PM10 (µg/m³)')
plt.show()

"""Lastly, the only thing missing is finding the 3 best and worst months recorded. Given the values from the pollutants, the ones that represent a factual threat to human health are Carbon Monoxide and PM10 particles, so the best/worst months will be given for these pollutants. """

def find_best_three(A):
  current_best = 9999999
  i_= 0
  for i in range(len(A)-2): #Iterate over each 3 values
    posible = (A[i]+A[i+1]+A[i+2]) / 3 #Calculate the mean of those 3
    if posible < current_best: #If the mean is better, update
      current_best = posible
      i_ = i
  return [[A[i_],A[i_+1],A[i_+2]],i_,current_best]

def find_worst_three(A):
  current_worst = -9999999
  i_= 0
  for i in range(len(A)-2): #Iterate over each 3 values
    posible = (A[i]+A[i+1]+A[i+2]) / 3 #Calculate the mean of those 3
    if posible > current_worst: #If the mean is better, update
      current_worst = posible
      i_ = i
  return [[A[i_],A[i_+1],A[i_+2]],i_,current_worst]

print('Best',find_best_three(MX_valley_mo['Monoxido_Carbono']))
print('Worst',find_worst_three(MX_valley_mo['Monoxido_Carbono']))
print('Best',find_best_three(MX_valley_mo['PM10']))
print('Worst',find_worst_three(MX_valley_mo['PM10']))

"""And next, we find the best 3 months for each year."""

for year in years:
  print(year)
  current = MX_valley_mo[MX_valley_mo['Anno']==year]
  print('Best',find_best_three(list(current['Monoxido_Carbono'])))
  print('Worst',find_worst_three(list(current['Monoxido_Carbono'])))
  print('Best',find_best_three(list(current['PM10'])))
  print('Worst',find_worst_three(list(current['PM10'])))

"""References:

- http://dgeiawf.semarnat.gob.mx:8080/ibi_apps/WFServlet?IBIF_ex=D3_R_AIRE01_01&IBIC_user=dgeia_mce&IBIC_pass=dgeia_mce

"""